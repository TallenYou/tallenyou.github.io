<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://tallenyou.github.io/</id>
    <title>Musk的碎碎念</title>
    <updated>2020-06-14T15:04:59.818Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://tallenyou.github.io/"/>
    <link rel="self" href="https://tallenyou.github.io/atom.xml"/>
    <subtitle>坦荡面对，大胆前行</subtitle>
    <logo>https://tallenyou.github.io/images/avatar.png</logo>
    <icon>https://tallenyou.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Musk的碎碎念</rights>
    <entry>
        <title type="html"><![CDATA[现代操作系统系列(1)——操作系统环境和系统调用]]></title>
        <id>https://tallenyou.github.io/post/xian-dai-cao-zuo-xi-tong-xi-lie-1-cao-zuo-xi-tong-huan-jing-he-xi-tong-diao-yong/</id>
        <link href="https://tallenyou.github.io/post/xian-dai-cao-zuo-xi-tong-xi-lie-1-cao-zuo-xi-tong-huan-jing-he-xi-tong-diao-yong/">
        </link>
        <updated>2020-06-14T14:44:37.000Z</updated>
        <content type="html"><![CDATA[<p>[toc]</p>
<h2 id="关于本系列的一点题外话">关于本系列的一点题外话</h2>
<p>这是我本人关于操作系统的基本内容，会涉及到操作系统面试中的重点概念。但是限于篇幅和个人能力，本系列文章不会覆盖操作系统的所有细节。</p>
<p>希望本文能给所有阅读者一点点收获，也希望通过输出倒逼输入，让知识在我脑中有更深入的理解，提升自己编码的内功。</p>
<p>各位读者仅凭本文只能知道一些操作系统的皮毛，要想有更进一步的提升，更建议阅读以下参考书目和课程。</p>
<ul>
<li>
<p>操作系统原理（北京大学）  [操作系统原理（北京大学）]: https://www.coursera.org/learn/os-pku	&quot;操作系统原理（北京大学）&quot;</p>
</li>
<li>
<p>现代操作系统（第四版 [现代操作系统（第四版）]: https://book.douban.com/subject/27096665/	&quot;现代操作系统（第4版）&quot;</p>
</li>
</ul>
<p>最后，可以转载，注明来源即可</p>
<h2 id="计算机硬件简介">计算机硬件简介</h2>
<h3 id="处理器cpu">处理器（CPU）</h3>
<ul>
<li>
<p>CPU在内存中取出指令并执行。在每个CPU基本周期中，首先从内存中取出指令，解码以确定其类型和操作数，接着执行之，然后取指、解码并执行下一条指令。按照这一方式，程序被执行完成。</p>
</li>
<li>
<p>每个CPU都有一套可执行的专门指令集，所以，x86处理器不能执行ARM程序，同理，反之也不行。</p>
</li>
<li>
<p>CPU执行指令的时间比从访问内存的时间短得多。所有，在CPU内部有用来保存关键变量和临时数据的寄存器。即所谓的通用寄存器</p>
</li>
<li>
<p>三个特殊寄存器需要认识：程序计数器（PC）、堆栈指针、程序状态字（PSW）</p>
<ul>
<li><strong>程序计数器（PC）</strong>：保存了将要取出的下一条指令的内存地址。在指令取出之后，程序计数器就被更新以便指向后继的指令。</li>
<li><strong>堆栈指针</strong>：指向内存中当前栈的顶端。该栈包含了每个执行过程的栈帧。一个过程的栈帧中保存了有关的输入参数、局部变量以及那些没有保存在寄存器中的临时变量</li>
<li><strong>程序状态字（PSW）</strong>：这个寄存器包含了条件码位（由比较指令设置）、CPU优先级、模式（用户态或内核态），以及各种其他控制位。<strong>在系统调用和I/O中，PSW的作用很重要。</strong></li>
</ul>
</li>
<li>
<p>关于工作模型：古早的同时读取、解读和执行一条指令已经被放弃。流水线模型也已经落伍。现在更先进的设计师超标量CPU，即取指，解码之后传入保持缓冲区，之后多个执行单元从缓冲区中不断移出并执行。因为<strong>带来的现象就是程序指令经常不按顺序执行。</strong></p>
</li>
<li>
<p><strong>多数CPU都有两种状态：内核态和用户态</strong>，内核态运行操作系统程序（执行特权指令），用户态运行用户程序。（吐槽：其实CPU硬件设计不止两个状态，只是操作系统一般只用两个就够了）</p>
</li>
<li>
<p>用户态到内核态的切换，需要执行系统调用（system call）以陷入内核并调用操作系统。又称<strong>TRAP</strong>陷入指令。<strong>实际上用户态到内核态的唯一途径就是中断（外中断）/异常（内中断）/陷入机制，内核态到用户态的途径是设置程序状态字PSW</strong></p>
<h2 id="其他">其他</h2>
</li>
</ul>
<p>存储器、磁盘、I/O设备、总线暂时不做展开</p>
<h2 id="系统调用">系统调用</h2>
<ul>
<li>系统调用就是用户在编程时可以调用的<strong>操作系统功能</strong></li>
<li>系统调用是操作系统提供给编程人员的<strong>唯一接口</strong></li>
<li>系统调用使CPU状态从用户态<strong>陷入</strong>到内核态，这里就是涉及到<strong>TRAP陷入指令</strong>了</li>
<li>每个操作系统都提供几百种<strong>系统调用，可分为：进程控制，进程通信、文件使用、目录维护、设备管理、信息维护等</strong>。（吐槽：其实windows的系统调用有数千个……）</li>
<li><strong>系统调用</strong>就涉及到中断异常机制，所有中断异常机制基本按照下面这个<strong>工作步骤</strong>（<strong>划重点！</strong>）：中断保存、中断服务执行、中断恢复
<ol>
<li>硬件压入堆栈程序计数器等</li>
<li>汇编语言过程保存寄存器值</li>
<li>汇编语言过程设置新的堆栈</li>
<li>C中断服务例程运行（典型地读和缓冲输入）</li>
<li>调度程序决定下一个将运行的过程</li>
<li>C过程返回至汇编代码</li>
<li>汇编语言过程开始运行新的当前进程。</li>
</ol>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ 递归的道与术 [未完结版]]]></title>
        <id>https://tallenyou.github.io/post/di-gui-de-dao-yu-zhu-wei-wan-jie-ban/</id>
        <link href="https://tallenyou.github.io/post/di-gui-de-dao-yu-zhu-wei-wan-jie-ban/">
        </link>
        <updated>2020-06-14T12:12:24.000Z</updated>
        <content type="html"><![CDATA[<p>[toc]</p>
<h2 id="道">道</h2>
<h3 id="递归就是自我调用">递归就是自我调用</h3>
<p>分支转向是算法的灵魂；函数和过程及其之间的相互调用，是在经过抽象和封装之后，实现分支转向的一种重要机制；而递归则是函数和过程调用的一种特殊形式，即允许函数和过程进行自我调用。</p>
<h3 id="递归的价值在于简洁而准备">递归的价值在于简洁而准备</h3>
<p>以操作系统为例，多数文件系统的目录结构都是递归定义的。具体地，每个文件系统都有一个最顶层的目录，其中可以包含若干文件和下一层的子目录；而在每一子目录中，也同样可能包含若干文件和再下一层的子目录；如此递推，直至不含任何下层的子目录。</p>
<h3 id="递归是一种基本而典型的算法设计模式">递归是一种基本而典型的算法设计模式</h3>
<p>这一模式可以对实际问题中反复出现的结构和形式做高度概括，并从本质层面加以描述与刻画，进而导出高效的算法。从程序结构的角度看，递归模式能够统筹纷繁多变的具体情况，避免复杂的分支以及嵌套的循环，从而更为简明地描述和实现算法，减少代码量，提高算法的可读性， 保证算法的整体效率。</p>
<hr>
<h2 id="术">术</h2>
<h3 id="线性递归">线性递归</h3>
<h4 id="现象">现象</h4>
<ul>
<li>
<p><strong>问题</strong><br>
计算给定n个整数的总和。(采用递归方式解决)</p>
</li>
<li>
<p><strong>思路</strong><br>
易见，若n = 0则总和必为0，这也是最终的平凡情况；<br>
否则一般地，总和可理解为前n - 1个整数（A[0, n - 1)）之和，再加上末元素（A[n - 1]）</p>
</li>
<li>
<p><strong>代码</strong></p>
</li>
</ul>
<pre><code class="language-cpp">int sum(int A[], int n){ //数组求和算法（线性递归）
	if(1 &gt; n) //平凡情况
		return 0; //直接（非递归式）计算
	else //一般情况
		return sum(A, n - 1) + A[n - 1]; //递归:前n-1项之和，再累计第n-1项
} // O(1)*递归深度 = O(1)*(n+1) = O(n)
</code></pre>
<ul>
<li>
<p><strong>基本技巧</strong><br>
首先判断并处理n = 0之类的平凡情况，以免因无限递归而导致系统溢出。<br>
这类平凡情况统称“<strong>递归基</strong>”（base case of recursion） 。<br>
平凡情况可能有多种，但至少要有一种（比如此处） ，且迟早必然会出现。</p>
</li>
<li>
<p><strong>剖析</strong></p>
<p>​	算法sum()可能朝着更深一层进行自我调用，且每一递归实例对自身的调用至多一次。<br>
于是，<strong>每一层次上至多只有一个实例，且它们构成一个线性的次序关系。</strong><br>
此类递归模式因而称作“线性递归” （linear recursion） ，它也是递归的最基本形式。</p>
<p>​	这种形式中， <strong>应用问题总可分解为两个独立的子问题</strong>： 其一对应于单独的某个元素， 故可直<br>
接求解（比如A[n - 1]） ；另一个对应于剩余部分，且其结构与原问题相同（比如A[0, n - 1)） 。<br>
另外，子问题的解经简单的合并（比如整数相加）之后， 即可得到原问题的解。</p>
</li>
<li>
<p><strong>减而治之</strong></p>
<p>​	线性递归的模式， 往往对应于所谓减而治之（decrease-and-conquer） 的算法策略：<strong>递归每深入一层，待求解问题的规模都缩减一个常数，直至最终蜕化为平凡的小（简单）问题。</strong><br>
​	按照减而治之策略，此处随着递归的深入，调用参数将单调地线性递减。因此无论最初输入的n有多大，递归调用的总次数都是有限的， 故算<strong>法的执行迟早会终止，即满足有穷性。当抵达递归基时，算法将执行非递归的计算</strong>（这里是返回0）。</p>
</li>
</ul>
<h3 id="递归跟踪">递归跟踪</h3>
<p>​		作为一种直观且可视的方法，递归跟踪（ recursion trace） 可用以分析递归算法的总体运行时间与空间。具体地，就是按照以下原则， 将递归算法的执行过程整理为图的形式：</p>
<ol>
<li>算法的每一递归实例都表示为一个方框，其中注明了该实例的参数</li>
<li>若实例M调用实例N，则在M与N对应的方框之间添加一条有向连线</li>
</ol>
<h3 id="递归方程">递归方程</h3>
<p>​		递归算法的另一常用分析方法， 即递推方程（recurrence equation） 法。<br>
与递归跟踪分析相反， 该方法无需绘出具体的调用过程，而是通过对递归模式的数学归纳，导出复杂度定界函数的递推方程（组）及其边界条件，从而将复杂度的分析， 转化为递归方程（组）的求解。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[运用递归解决树的问题]]></title>
        <id>https://tallenyou.github.io/post/yun-yong-di-gui-jie-jue-shu-de-wen-ti/</id>
        <link href="https://tallenyou.github.io/post/yun-yong-di-gui-jie-jue-shu-de-wen-ti/">
        </link>
        <updated>2020-05-25T13:00:09.000Z</updated>
        <content type="html"><![CDATA[<p>此刻是2020年5月25日20:58:10，由于今晚时间有限，有正事要做，内容暂时不做详细说明。<br>
后面有时间的话，我会结合具体题目的和代码分析。</p>
<figure data-type="image" tabindex="1"><img src="https://s1.ax1x.com/2020/05/25/tCNCuR.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ 大概是这样子的，应该是困难的事情]]></title>
        <id>https://tallenyou.github.io/post/da-gai-shi-zhe-yang-zi-de-da-gai-ye-shi-fei-chang-kun-nan-de-shi-qing/</id>
        <link href="https://tallenyou.github.io/post/da-gai-shi-zhe-yang-zi-de-da-gai-ye-shi-fei-chang-kun-nan-de-shi-qing/">
        </link>
        <updated>2020-05-23T08:58:44.000Z</updated>
        <content type="html"><![CDATA[<p>[TOC]</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=571339489&auto=1&height=66"></iframe>
<blockquote>
<p>世界的本质是混乱和秩序，一只脚坚定地踏在秩序和安全中，另一只脚则踏在混乱、可能性、成长和冒险里。当你恰到好处地处在秩序和混乱的交界线上时，生活就会变得跌宕起伏、扣人心弦且充满意义，你也会进入忘我的专注状态。</p>
</blockquote>
<figure data-type="image" tabindex="1"><img src="https://s1.ax1x.com/2020/05/24/YzzYjS.md.jpg" alt="南沙随手拍摄" loading="lazy"></figure>
<h2 id="大概是这样子的">大概是这样子的</h2>
<p>无论是在生活中还是在网络上，我遇到过很多好看的靓仔靓女在寻找爱情，在我看来都是挺不可思议的。或许对于对象，每个人都有自己的期许吧。也希望大家伙都早点找到属于自己的感情吧。</p>
<p><strong>关于我</strong></p>
<ul>
<li>93年的，也不算太年轻了。</li>
<li>出身普通家庭，简单和睦，父母感情很好，我与我哥关系也很好。</li>
<li>身高181。</li>
<li>软件开发者。</li>
<li>在大城市中尚能温饱。</li>
<li>性格是 INTJ 专家型 或 ENTJ 陆军元帅型，取决于不同题库。</li>
<li>兴趣是 <s>单机游戏/主机游戏</s>、阅读、和瞎逛。年岁渐长，为了集中精力，把时间分配给了阅读和学习，牺牲了游戏的大部分：把switch送给老哥，ps4 吃灰了，steam 好久没上线，Epic 白嫖却不玩。</li>
<li>……</li>
</ul>
<p><strong>我能写出细腻的内容，也知道大家想知道些什么，或许也理解一些共情。但我想脱离技巧，表达真诚的东西，也是做一次直面现实的探索。</strong></p>
<figure data-type="image" tabindex="2"><img src="https://s1.ax1x.com/2020/05/24/tSerd0.md.jpg" alt="志明与春娇" loading="lazy"></figure>
<p>从25岁开始，我决心做一个坦荡、勇敢、专注的人。开始探索内心，试着客观地去观察所处的社会，思考问题的本质，寻找属于自己的方法论。</p>
<p>尔后，我开始正面很多问题，从中获得精神的振奋，但实际上我还是在悄无声息中逃避了很多东西，比如:感情。</p>
<p>未做深思之前，我也觉得自己本不该为之烦恼的。因为现实世界中，我很笃定自己对其他需求（尊重的需求、自我实现的需求）的追求，并为之专注和牺牲，也因此获得一些物质和精神的收获。正常来说，追求什么就会看到什么。</p>
<p>但实际上我确实是有情感烦恼的。</p>
<p>遇到烦恼有两种处理办法：1，装作看不见，2，正面对视它。</p>
<p>过去，我一直选择前者，但这一次，我想选择后者。</p>
<h2 id="矛盾的地方">矛盾的地方</h2>
<p>解决自己特有问题的方案是需要量身定制的，而定制的前提就是需要认清自己是谁、想要什么、以及愿意做什么。</p>
<p><strong>我希望的那个她，人生观，价值观，世界观彼此之间方向是契合的</strong></p>
<p>天天一堆人在讲三观不合，但你真的他们三观是什么，又答不出来。其实讲不出来未必没有，就如同痛苦是真实存在的，但未必所有人都能说得出来。</p>
<p>世界是多样的，大多数时候三观就跟性格一样，没有特定的好坏。</p>
<p><strong>何为三观方向契合呢？我是这样的人，倘若，你觉得自己和我是契合的，那就是契合了。</strong></p>
<p>那么，我是什么样的人了呢？</p>
<ul>
<li>谦和，我是随和宽容的人，情绪稳定，该争的时候力争，但绝大多数情境都和社会友好握手。</li>
<li>勇敢和坚韧，我认识到痛苦是真实的，要发挥潜力就得有牺牲，我愿意一个人去面对牺牲和痛苦。</li>
<li>道德</li>
<li>纯粹，我希望人能纯粹一点，估计是处女座，这点我觉得是自身的洁癖，所以在我的生活中，没有的复杂的感情史、同居史、社交软件，也不喜欢夜夜笙歌灯红酒绿。我宁愿把精力花在早上起来读点书，晚上把手机关机两小时学习一下或者做些其他有意义的事情。</li>
<li>有趣和幽默，可能是遗传了我爸我妈的逗B细胞吧。<strong>生活嘛，最紧要系开心啦~</strong><br>
……</li>
</ul>
<figure data-type="image" tabindex="3"><img src="https://s1.ax1x.com/2020/05/24/tS2vTJ.md.jpg" alt="柳川，也就是东京日和拍摄的地方" loading="lazy"></figure>
<h2 id="应该是困难的事情">应该是困难的事情</h2>
<p>如果有人看到这里，可能会以为我是个温文儒雅的外表形象，但实际却有较大差别，我的外表形象更像一个粗人、一介莽夫。并非开玩笑，确实是这样的。</p>
<p>谈不上相貌堂堂，基本也算五官端正，高大健壮，嗯，不是挺着啤酒肚那种。</p>
<p><strong>那么有什么困难的呢？</strong></p>
<p>当我发现大脑越来越好用的时候，一切不断的往好的方向发展的时候，我开始不断收获的时候，也发现越来越光了。。。是的，就挺秃然的。</p>
<p>我相信很多女生难以接受对象是这样子的，兴许以后有空植个发，跟我的偶像马斯克一样吧。</p>
<p>生活不会总是一帆风顺的。这算什么事呢，但我的人生由我自己负责。</p>
<figure data-type="image" tabindex="4"><img src="https://s1.ax1x.com/2020/05/24/tSOKOJ.md.jpg" alt="南澳" loading="lazy"></figure>
<blockquote>
<p>没有什么能阻止你，<br>
最好的日子不能，<br>
安静的日子不能说，<br>
汹涌的海也不能。<br>
——《我们生活的故事》 马克.斯特兰德</p>
</blockquote>
<h2 id="花絮">花絮</h2>
<ul>
<li>
<p>写这篇文章的时候，崩了好几次，很尴尬。预计两小时，结果周末断断续续写了两天。中间好几次想放弃，但是做事还是得有始有终啊。</p>
</li>
<li>
<p>这篇文章是我用Markdown语法写的第一篇文章。我有另外一个独立的博客，我有时候会在上面写点东西，但是不太稳定，所以我打算以后再GitHub上面同步一份。</p>
</li>
</ul>
<p>这下子真的没有了，<strong>祝大家早点找到幸福吧</strong></p>
]]></content>
    </entry>
</feed>